\documentclass[12pt]{article}

\usepackage{sbc-template}

\usepackage{graphicx,url}

\usepackage[brazil]{babel}   
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}

\usepackage{listings}
\usepackage{xcolor}

\lstdefinestyle{customc++}{
  belowcaptionskip=1\baselineskip,
  breaklines=true,
  frame=L,
  xleftmargin=\parindent,
  language=C++,
  showstringspaces=false,
  basicstyle=\footnotesize\ttfamily,
  keywordstyle=\bfseries\color{green!40!black},
  commentstyle=\itshape\color{red!70!black},
  %identifierstyle=\color{blue},
  stringstyle=\color{orange},
}
     
\sloppy

\title{TODO: Title}

\author{Matheus B. Nascimento\inst{1},
		Wisllay Vitrio\inst{1}
}

\address{
	Instituto de Informática -- Universidade Federal de Goiás (UFG)\\
	Caixa Postal 131 -- CEP 74.001-970 -- Goiânia -- GO -- Brasil
}

\begin{document} 

\maketitle

\begin{abstract}
Abstract. Abstract. Abstract. Abstract. Abstract. Abstract. Abstract. Abstract. Abstract. Abstract.
\end{abstract}
     
\begin{resumo}
Neste trabalho é apresentada uma implementação do espaço de tuplas em Go, permitindo que vários processos o acessem simultaneamente, realizando leituras e escritas de tuplas com valores de qualquer tipo. A implemnetação foi testada utilizando um exemplo que explora paralelismo. Ganhos de speedup foram obtidos com o aumento no número de servidores.  
\end{resumo}

\section{Introdução}
\label{sec:introducao}

Espaço de tuplas é um conceito de memória associativa para computação distribuída/paralela.
Desenolvido por David Gelernter na Universidade de Yale, teve sua primeira implementação na linguagem de coordenação ``Linda'' (homenagem a uma atriz pornô de nome Linda Lovelace, assim como o nome da linguagem ``Ada'' é uma homenagem à Ada Lovelace~\cite{web:name_linda}).
% web:name_linda http://www.nytimes.com/1992/01/19/business/david-gelernter-s-romance-with-linda.html

O espaço de tuplas provê um repositório de tuplas que pode ser acessado concorrentemente por zero ou mais processos.
Por ser baseado em memória associativa, as tuplas são acessadas por seu conteúdo e não por endereços.
As tuplas não estão ligadas à nenhum processo, e qualquer um deles pode inserir, ler ou remover tuplas.
Este desacoplamento total entre as partes integrantes do sistema provido pelo espaço de tuplas é sua principal vantagem.

Várias linguagens têm implementações de espaço de tuplas, sendo a especificação para Java, JavaSpaces~\cite{web:javaspaces}, a mais famosa.
Como parte da tecnologia Jini, JavaSpaces é utilizado em serviços de finanças e telecomunicações para alcançar escalabilidade utilizando processamento paralelo.
Por outro lado, a tecnologia Jini como um todo não é sucesso comercial, e o JavaSpaces não é amplamente utilizado.
% web:javaspaces https://river.apache.org/doc/specs/html/js-spec.html

\section{O Espaço de Tuplas}
\label{sec:tuplespace}

Como foi descrito na seção \ref{sec:introducao}, o espaço de tuplas permite que
processos se comuniquem sem o conhecimento um do outro, local ou remotamente, 
inserindo e removendo objetos representados por tuplas de valores.
Para realizar o acesso aos dados do espaço de
tuplas, o paradigma oferece três primitivas: \emph{read()}, \emph{take()} e 
\emph{write()}. Esta seção explica o funcionamento de cada uma dessas primitivas e
como foram implementadas levando em consideração as decisões arquiteturais tomadas.

\subsection{Primitivas}
\label{sec:primitivas}

Um dos exemplos de implementação do espaço de tuplas é o JavaSpaces \cite{?}, que foi 
uma solução em Java para o espaço de tuplas. Nele as tuplas são armazenadas como uma 
sequência de valores primitivos \emph(int, double, String, etc.) através da primitiva
\emph{write()}. E os valores são lidos passando-se um \emph{template}, que representa
a tupla procurada. A estrutura do template é a mesma da tupla, e serve como filtro 
para as primitivas \emph{read()} e \emph{take()}. Essas primitivas retornam uma tupla 
que combine com o template passado como parâmetro. No caso do JavaSpaces, o template 
é uma tupla, onde cada valor pode ser nulo, significando que qualquer valor é valido 
para aquela posição da tupla ou um valor específico, o qual deve combinar com a tupla  
procurada.

Na solução de espaço de tuplas desenvolvida nesse trabalho, foi utilizada a
linguagem Go \cite{?}, e seguimos o mesmo modelo  do JavaSpaces para a representação 
das tuplas, para escrita e leitura, com a que aceitamos qualquer tipo de dado que 
possa ser serializado como atributo de uma tupla. 


\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/integral.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}


\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/performance1.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}

\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/performance2.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}

\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/indice_invertido.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}

\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/indice_tuplas.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}

\begin{lstlisting}[style=customc++]
// Stops retransmission attempts on remote station manager (RTS/CTS and Data)
Config::SetDefault("ns3::WifiRemoteStationManager::MaxSsrc",UintegerValue(0));
Config::SetDefault("ns3::WifiRemoteStationManager::MaxSlrc",UintegerValue(0));
\end{lstlisting}


\begin{lstlisting}[style=customc++]
// Create default PHY and Channel
YansWifiChannelHelper chan = YansWifiChannelHelper::Default();
YansWifiPhyHelper phy = YansWifiPhyHelper::Default();
// Set channel
phy.SetChannel(chan.Create());
\end{lstlisting}

\begin{lstlisting}[style=customc++]
// Set Reception Gain to 0
phy.Set("RxGain", DoubleValue(0));
// Disable signal detection so the sending devices don't backoff
phy.Set("EnergyDetectionThreshold", DoubleValue(0));
// Stop the PHY layer from declaring 'CCA_BUSY'
phy.Set("CcaMode1Threshold", DoubleValue(0));
\end{lstlisting}


\begin{lstlisting}[style=customc++]
// Create and setup mobility
MobilityHelper mob;
mob.SetPositionAllocator("ns3::GridPositionAllocator",
	"MinX", DoubleValue(0),
	"MinY", DoubleValue(0),
	"DeltaX", DoubleValue(gridDeltaX),
	"DeltaY", DoubleValue(gridDeltaY),
	"GridWidth", UintegerValue(gridWidth),
	"LayoutType", StringValue("RowFirst"));
mob.SetMobilityModel("ns3::RandomWalk2dMobilityModel",
	"Bounds", RectangleValue(Rectangle(-walkX, walkX, -walkY, walkY)));
\end{lstlisting}

\section{Caso de teste}
\label{sec:caso_de_teste}

\section{Resultados}
\label{sec:resultados}

Resultados

\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/ql_exec_color.png}
	\caption{Variação de recebimento durante a execução do algoritmo QL}
	\label{fig:ql_exec}
\end{figure}

\begin{figure}[h]
	\center
	\includegraphics[width=.85\textwidth]{img/es_exec_color.png}
	\caption{Variação de recebimento durante a execução do algoritmo ES}
	\label{fig:es_exec}
\end{figure}

\begin{table}[h]
\begin{tabular}{ccccc}
Partes \textbackslash Servidores  & 1              & 2 & 4 & 8 \\
8  & $19.59 \pm 0.49$ &   &   &   \\
16 &                &   &   &   \\
32 &                &   &   &   \\
64 &                &   &   &  
\end{tabular}
\end{table}

\section{Conclusão}
\label{sec:conclusao}

Conclusão

\bibliographystyle{sbc}
\bibliography{sbc-template}

\end{document}
